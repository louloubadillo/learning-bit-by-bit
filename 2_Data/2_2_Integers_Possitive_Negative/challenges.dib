#!csharp

#r "nuget: Interactive.Journey"
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive.Formatting;

#!markdown

# [Challenge] Signed ints

#!csharp

bool getNegativeAgeResult;
async void getNegativeAge() {
    ChallengeContext context = new ChallengeContext(Lesson.CurrentChallenge);
    var d = display(
        PocketViewTags.strong("Type your age in negative numbers using the prompt at the top of the screen")
    );
    var input = await GetInputAsync("give me data");
    try{
        var value = Convert.ToSByte(Convert.ToString(input), 2);
        getNegativeAgeResult = value < -1;
    } catch(Exception){
        getNegativeAgeResult = false;
    }
    d.Update(' ');
}

#!csharp

Lesson.CurrentChallenge.AddRule("Rule: 2.2. Signed Ints", context =>
{
    if(getNegativeAgeResult){
        context.Pass("Good job!");
    } else {
        context.Fail("Check your answe.");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        context.SetMessage("Please wait! We are checking your submission");
        int numPassed = context.RuleEvaluations.Count(e => e.Passed);
        int total = context.RuleEvaluations.Count();
        if(numPassed == total){
            context.SetMessage("Congratulations! Challenge completed");
            await context.StartNextChallengeAsync();
        } else {
            context.SetMessage("Challenge 2.2. is not complete");
        }
    });

#!markdown

[Question]

<h2>Challenge</h2>

<mark>_Execute the cell below and input the negative value of your age in binary_</mark>

#!csharp

getNegativeAge();
