#!markdown

<h1>2.2. Integers, Unsigned, Possitive and Negative</h1>

#!markdown

_In this lesson, you will learn how integer representations for signed and unsigned integers may vary_

#!markdown

<span style="font-size: 1rem">
I now know how to represent (possitive) integer values in binary. But how do I represent a negative value?
</span>

#!markdown

## Unsigned integers

Up until this point we have been studying integer values with no sign, hence the name. This work exactly as you would expect. However, _signed integers_ can be a bit (pun intended) different.

#!markdown

## Signed integers

In signed integers, the most significant bit (the leftmost) acquires a negative value. Hence:
$$(10000000)_2 = -128$$

$$(01111111)_2 = 127 $$

As you can see, the maximum absolute quantity for signed ints is smaller than unsigned ints because they need to cover both positive and negative numbers. 

#!markdown

## From decimal to binary

As per the above, the following formula can be used to represent a signed int in binary (MST stands for most significant bit)

$$
-\text{MSB} + x = -n

#!csharp

#r "nuget: Interactive.Journey"

#!csharp

#!start-lesson --from-file "challenges.dib"
