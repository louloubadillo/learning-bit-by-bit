#!csharp

//Packages
#r "nuget: Interactive.Journey"
#r "nuget: Interactive.Extension.ImageSharp"
//Libraries
using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!markdown

# [Challenge] Bitmaps

#!csharp

//Reset the challenge before starting a new one
Lesson.ResetChallenge();

#!csharp

Func<int[,,], string> guessImage = (img) => " ";
int[,,] image1;
int[,,] image2;
int[,,] image3;
int[,,] image4;
int[,,] image5;

#!csharp

Lesson.CurrentChallenge.AddRule("2.7. Image 1", context =>
{
    if(guessImage(image1) == '0') context.Pass("Image 1: Correct");
    else context.Fail("Image 1: Incorrect");
});
Lesson.CurrentChallenge.AddRule("2.7. Image 2", context =>
{
    if(guessImage(image2) == '1') context.Pass("Image 2: Correct");
    else context.Fail("Image 2: Incorrect");
});
Lesson.CurrentChallenge.AddRule("2.7. Image 3", context =>
{
    if(guessImage(image3) == 'i') context.Pass("Image 3: Correct");
    else context.Fail("Image 3: Incorrect");
});
Lesson.CurrentChallenge.AddRule("2.7. Image 4", context =>
{
    if(guessImage(image4) == 'e') context.Pass("Image 4: Correct");
    else context.Fail("Image 4: Incorrect");
});
Lesson.CurrentChallenge.AddRule("2.7. Image 5", context =>
{
    if(guessImage(image5) == 'pi') context.Pass("Image 5: Correct");
    else context.Fail("Image 5: Incorrect");
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        context.SetMessage("Please wait! We are checking your submission");
        int numPassed = context.RuleEvaluations.Count(e => e.Passed);
        int total = context.RuleEvaluations.Count();
        if(numPassed == total){
            context.SetMessage("Congratulations! Challenge completed");
            await context.StartNextChallengeAsync();
        } else {
            context.SetMessage("Challenge 2.7. is not complete");
        }
    });

#!markdown

[Question]

<h2> Challenge </h2>

Consider the following arrays. These have been made to match one of the following symbols as an image:

$1$, $0$, $\pi$, $e$, $i$

#!csharp

int[,,] image1 = new int[8,8,3] {
       {{1, 1, 1}, {1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1}},

       {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1}}
};

#!csharp

int[,,] image2 = new int[8,8,3] {
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{1, 1, 1}}
};

#!csharp

int[,,] image3 = new int[8,8,3] {
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{0, 0, 0},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}}
};

#!csharp

int[,,] image4 = new int[8,8,3] {
    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1}},
    
    {{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1}},
    
    {{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1}},

    {{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{1, 1, 1}},

    {{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0}},

    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1}}
};

#!csharp

int[,,] image5 = new int[8,8,3] {
    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{1, 1, 1},{0, 0, 0}},

    {{1, 1, 1},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0},{0, 0, 0}},

    {{0, 0, 0},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1}},

    {{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{1, 1, 1},{0, 0, 0},{1, 1, 1},{0, 0, 0}},
    
    {{1, 1, 1},{0, 0, 0},{0, 0, 0},{1, 1, 1},{1, 1, 1},{0, 0, 0},{0, 0, 0},{1, 1, 1}}
};

#!markdown

<mark>_Write a function that receives one of the above arrays and outputs the symbol it represents_</mark>

#!csharp

guessImage = (arr) => {
    // Symbols '0', '1', 'pi', 'i', 'e'
    if(arr == image1) return " ";
    if(arr == image2) return " ";
    if(arr == image3) return " ";
    if(arr == image4) return " ";
    if(arr == image5) return " ";
    return " ";
};
