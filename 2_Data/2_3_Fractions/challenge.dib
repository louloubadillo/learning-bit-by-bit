#!csharp

#r "nuget: Interactive.Journey"
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive.Formatting;

#!markdown

# [Challenge] Fractions

#!csharp

float binaryStringToFloat(string s){
    int i = Convert.ToInt32(s, 2);
    byte[] b = BitConverter.GetBytes(i);
    return BitConverter.ToSingle(b, 0);
}

async Task<bool> verifyBinaryFloatInput(float f){
    var input = Convert.ToString(await GetInputAsync(Convert.ToString(f)));
    if(input.Length != 32) return false;
    try{
        float answer = binaryStringToFloat(input);
        if( Math.Abs( f - answer ) < 0.0001 ) return true;
    } catch(Exception){
        return false;
    }
    return true;
}

void fractionsChallenge(){
    Lesson.CurrentChallenge.AddRule("0.2 in IEEE754 float", async context =>{
        if(await verifyBinaryFloatInput(0.2f)) context.Pass();
        else context.Fail();
    });
    Lesson.CurrentChallenge.AddRule("-3.14 in IEEE754 float", async context =>{
        if(await verifyBinaryFloatInput(-3.14f)) context.Pass();
        else context.Fail();
    });
    Lesson.CurrentChallenge.AddRule("-0.01 in IEEE754 float", async context =>{
        if(await verifyBinaryFloatInput(-0.01f)) context.Pass();
        else context.Fail();
    });
}

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    context.SetMessage("Please wait! We are checking your submission");
    int numPassed = context.RuleEvaluations.Count(e => e.Passed);
    int total = context.RuleEvaluations.Count();
    if(numPassed == total){
        context.SetMessage("Congratulations! Challenge completed");
        await context.StartNextChallengeAsync();
    } else {
        context.SetMessage("Challenge 2.3. is not complete");
    }
});

#!markdown

[Question]

<h2>Challenge</h2>

<mark>_Run the script below and type your answers on the prompt at the top of the screen._</mark>

#!csharp

fractionsChallenge();
