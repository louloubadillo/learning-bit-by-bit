#!markdown

# Learning Bit by Bit

#!csharp

//Packages
#r "nuget: Interactive.Journey"
#r "nuget: Interactive.Extension.ImageSharp"

#!csharp

//Libraries
using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!csharp

//Reset the challenge before starting a new one
Lesson.ResetChallenge();

#!markdown

# Part 1: Counting Systems

#!markdown

## 1.1 How to represent numbers

#!markdown

Itâ€™s a long summer and you have lots of freetime. Being the curious new mind in the neighborhood you begin to wonder around and explore. Yet one question keeps echoing in your head: how many people live here? So you set yourself up to the task of counting them to find your answer. How would you do it? And how would you represent such a quantity?

#!markdown

### [Challenge] Map individually

#!csharp

Func<char[], int> Counting = inputArray => 0;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking the counting function", context =>
{
    var correctAns  = 4;
    var ans = Counting(new char[] {'.','.','.','.'});

    if (ans == correctAns)
    {
        context.Pass("Counting function is correct");
    }
    else
    {
        context.Fail("Counting function is incorrect");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();

    if (total == numPassed)
    {
        context.SetMessage("Map individually challenge completed");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Map individually challenge is not complete");
    }
});

#!markdown

### [Question]

#!markdown

### Map individually: Counting people using dots

#!markdown

In this challenge you will be given an array of dots.

The dots are characters so the input will have the type `char[]`.

The idea of this challenge is to define a function that counts the number of dots in the array, such that this dots can serve as a way to represent quantities. You will write the answer as a lambda and assign it to `Counting`. Since the inputs are of the type `char[]` and the output is the number of dots (which is an integer), the lambda should have the type `Func<char[], int>`.

#!csharp

Counting = inputArray =>
{
    throw new NotImplementedException(); // Write your answer here
};

#!markdown

### [Scratchpad]

#!csharp

#!model-answer

Counting = inputArray =>
{
    return inputArray.Length;
};

#!csharp

Lesson.ResetChallenge();

#!markdown

Now that we finished the first question some of you might be wondering: why was it called "Map individually"?
When we considered using dots to represent quantities we were "mapping" (assigning) a symbol to each thing we wanted to count. For instance if we wanted to count people, we would assign a particular dot to each person and then the amount of people would match the amount of dots. You can look at the following image to understand what this means:

<img src="./images/mapping.png" alt="Mapping people to dots" style="width: 477px; height: 254px;">

#!markdown

Using dots in this way might work well for small amounts of data. However it is easy to imagine how this can become cumbersome really quickly.

#!markdown

So now you think of a clever way to extend this idea and you realize that the whole point of using dots in the first place was to talk about quantities in a symbolic manner. Thus, to save some space, you start using different symbols that represent different quantities, such as:

| Symbol         | Relative Value | Value in units |
|----------------|----------------|----------------|
| .              | .              | 1 unit         |
| o              | .....          | 5 units        |
| *              | ooooo          | 25 units       |

#!markdown

Using such symbols, and knowing their meaning, you are able to easily count the amount of people in the neighborhood. 

#!markdown

### [Challenge] Grouping and symbols

#!csharp

Func<char[], int> SymbolicCounting = inputArray => 0;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking the counting function", context =>
{
    var correctAns  = 87;
    var ans = SymbolicCounting(new char[] {'*','*','*','o','o','.','.'});

    if (ans == correctAns)
    {
        context.Pass("Counting function is correct");
    }
    else
    {
        context.Fail("Counting function is incorrect");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
    
        if (total == numPassed)
        {
            context.SetMessage("Grouping and Symbols challenge completed");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Grouping and Symbols challenge is not complete");
        }
    });

#!markdown

### [Question]

#!markdown

### Grouping and symbols: Assigning symbols to bigger values

#!markdown

In this challenge you are expected to write a program that receives an array of the aforementioned symbols and returns the number it represents. You will need to write the answer as a lambda and assign it to `SymbolicCounting`. This function takes an array of characters and assigns an integer. You will be given a template to write your code like the last time.

#!csharp

SymbolicCounting = inputArray =>
{
    throw new NotImplementedException(); 
    // Delete the code inside the lambda and write your answer here
    // Here are the symbols and their value as we mentioned in class:
    // * = 25 units
    // o = 5 units
    // . = 1 unit
};

#!markdown

### [Scratchpad]

#!csharp

#!model-answer

SymbolicCounting = inputArray =>
{
    int output = 0;
    for (int i = 0; i < inputArray.Length; i++)
    {
        if (inputArray[i] == '*')
        {
            output += 25;
        }
        else if (inputArray[i] == 'o')
        {
            output += 5;
        }
        else if (inputArray[i] == '.')
        {
            output += 1;
        }
        
    }
    return output;
};

#!csharp

Lesson.ResetChallenge();
